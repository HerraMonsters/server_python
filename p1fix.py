# -*- coding: utf-8 -*-
"""P1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z8PUpVcvi88nVlTk8fSj-JswwuGAl9xD
"""

!pip install pandas
!pip install underthesea

import sys
import re
import pandas as pd
import json
from underthesea import sent_tokenize
from underthesea import pos_tag
from underthesea import word_tokenize
import datetime
from datetime import timezone
import time
import datetime

#thiết lập thư viện stopword tiếng Việt
vnStopword = []
f = open("stopwords.txt", "r")
for x in f:
  x = re.sub(r'[\n]', '',x)
  vnStopword.append(x)

#thiết lập dictionary cho numberSeeker
with open('numberSeeker.json','r', encoding = "utf-8") as k:
    numjson = k.read()
numjson = re.sub(r'[\n]','',numjson)
numData = json.loads(numjson)

#thiết lập dictionary cho vnAbbriviate
with open('vnabb.json','r', encoding = "utf-8") as j:
    abbjson = j.read()
abbjson = re.sub(r'[\n]','',abbjson)
vnAbbriviate = json.loads(abbjson)

#STATUS = 0: TRỢ LÝ THÔNG MINH

req = -1 #request-status: 0 - function trả lời câu hỏi; 1 - function đặt vé; -1 - default
#trường hợp 1: nhận string, phục vụ cho các câu hỏi về lịch trình
defaultmss = 'lịch trình ngày 20/1 từ bến xe Giáp Bát' #nhận câu
req = 0 

#trường hợp 2: nhận json theo thứ tự câu hỏi cho function đặt vé hộ khách. Ý tưởng là nhận câu string rồi xác nhận lại với khách theo từng câu hỏi theo thứ tự trong json bên dưới
datve = {
    'pickupAddress':'trung tâm thành phố Hà Nội', #điểm đi (máy hỏi địa điểm xuống, đồng thời xuất lịch trình các điểm đón trả)
    'takeoffAddress':'trung tâm thành phố Thái Bình', #điểm đến (máy hỏi thời gian đi, đồng thời xuất bảng thời gian xe xuất phát tại pickup_point)
    'time':'12h09', #thời gian khởi hành (máy hỏi ngày đi, đưa ra gợi ý về ngày khách tương tác hiện tại, ngày mai, ngày kia)
    'date':'tôi muốn đi vào ngày 15 tháng 1', #ngày đi (máy hỏi số ghế)
    'seats':'12' #số ghế (máy tổng hợp lại thông tin tóm tắt cho khách)
}
req = 1

#STATUS = 1: XỬ LÝ  PHẢN ÁNH
feedbackmss = 'dk bằng sdt vs cả fb,đến khi mất fb r lở xóa grab đi mất thì lại đk?bằng sdt này k đc,bắt buột phải cái fb cũ,dm đâu lắm sdt để sài để dk grab v,h lm s để dk để đặt grab bằng sdt nàu đây,ức chế.;/.,[]'

### HÀM CHO XỬ LÝ REQUEST_STATUS 1 ###
def standardize(defmss,switch): #hàm xử lý ban đầu
  if not defmss:
    return('')
  else:
    defmss = defmss.lower()
    mss=defmss
    if switch == 0: #0 cho trường date
      mss = re.sub(r'[^\w\s/]', ' ',defmss) #lược dấu
      mss = re.sub(r'[/]', ' / ',mss)
      mss = word_tokenize(mss) #tokenize, rawmss theo kiểu array
    if switch == 1: #1 cho trường pickupAddress, takeoffAddress; biến feedback
      mss = re.sub(r'[^\w\s]', ' ',defmss)
      mss = word_tokenize(mss)
    if switch == 2: #2 cho trường time
      mss = re.sub(r'[^\w\s]', ' ',defmss)
      mss = re.sub(r'[h]', ' h ',mss)
      mss = word_tokenize(mss)
    return mss

def sw_remover(stdmss): #hàm lược stopword
  if not stdmss:
    return('')
  else:
    mss = ''
    for x in stdmss:
      if x not in vnStopword:
        mss = mss + x + ' ';
    return mss

def numSeeker(finalmss): #lọc dữ liệu số cho date và seats
  allNum = []
  switch = 0
  finalmss = word_tokenize(finalmss)
  print(finalmss[0])
  for i,x in enumerate(finalmss):
    if x.isdigit():
      allNum.append(x)
    if x == 'tháng' and len(allNum)==0:
      switch=1
  if switch == 1:
    c=allNum[0]
    allNum[0] = allNum[1]
    allNum[1] = c
  return allNum

def timeSeeker(finalmss): #chuẩn hóa thời gian
  time = [0,0,0]
  index = 0
  switch = 0
  finalmss = word_tokenize(finalmss)
  for i,x in enumerate(finalmss):
    if x.isdigit():
      if time[index] == 0:
        time[index] = int(x)
      else:
        index+=1;
        time[index] = int(x)
    else:
      if x == 'rưỡi':
        time[1]=30;
        time[2]=00;
        switch = 1
      if x == 'kém':
        time[1]=60-int(finalmss[i+1]);
        time[2]=00;
        switch = 1
  return time

year = datetime.date.today().year

def placecorrect(finalmss): #chuẩn hóa dữ liệu địa điẻm
  place = ''
  for x in finalmss:
    place = place + x + ' '
  return place
### KẾT THÚC HÀM XỬ LÝ REQUEST_STATUS 1 ###

#XỬ LÝ REQUEST_STATUS 1:
time = [year]
for i in numSeeker(sw_remover(standardize(datve['date'],0))):
  time.append(i)
print(time)
for j in timeSeeker(sw_remover(standardize(datve['time'],2))):
  time.append(j)
if len(time)==6:
  d = datetime.datetime(int(time[0]),int(time[2]),int(time[1]),int(time[3]),int(time[4]),int(time[5]))
  timestamp = d.replace(tzinfo=timezone.utc).timestamp()
  seats = numSeeker(sw_remover(standardize(datve['seats'],2)))

  request01 = {
      "status": 0,
      "data": {
          "pickupAddress":placecorrect(word_tokenize(sw_remover(standardize(datve['pickupAddress'],1)))),
          "takeoffAddress":placecorrect(word_tokenize(sw_remover(standardize(datve['takeoffAddress'],1)))),
          "time": timestamp,
          "seats": seats[0]
      }
  }
  print(request01)
else:
  print("error")




### HÀM XỬ LÝ PHẢN ÁNH ###
def abbriviateCorrect(mss): #xử lý viết tắt
  final = ''
  for i,x in enumerate(mss):
    if x in vnAbbriviate:
      final = final + vnAbbriviate[x] + ' '
    else:
      final = final + x +  ' '
  return final
### KẾT THÚC HÀM XỬ LÝ PHẢN ÁNH ###

#XỬ LÝ PHẢN ÁNH:
feedback = abbriviateCorrect((standardize(feedbackmss,1)))

#print(word_tokenize(finalmss))
#STATUS = 1

